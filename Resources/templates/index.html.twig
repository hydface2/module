{% extends 'layout.html.twig' %}

{% block container_content %}
    <script type="text/javascript">

        var app = angular.module('moderaApp', [
            'moderaApp.controllers',
            'moderaApp.directives',
            'moderaApp.services',
            'moderaApp.filters'
        ]).config(function($interpolateProvider){
            $interpolateProvider.startSymbol('{[{').endSymbol('}]}');
        });

        // Controllers
        angular.module('moderaApp.controllers', [
            //
        ]).controller('AppCtrl', function($scope, $timeout, api) {

            $scope.loading = true;

            $scope.curPage = 1;
            $scope.pageSize = 5;

            $scope.nameFilter = '';
            $scope.packages = {};
            $scope.totalPackages = 0;

            $scope.status = {
                title: 'Modal title',
                body: 'Loading ...'
            };

            var loadPage = function(page, nameFilter) {
                $scope.loading = true;
                $scope.packages = {};
                api.getList(page, nameFilter).success(function(response) {
                    if (true == response.success) {
                        $scope.packages = response.data;
                        $scope.totalPackages = response.total;
                    }
                    $scope.loading = false;
                });
            };

            var updatePackage = function(name, updateRequires) {
                api.getInfo(name).success(function(response) {
                    if (true == response.success) {

                        if (updateRequires) {

                            var requires = [];
                            var pushRequires = function($package) {
                                if ($package.installed) {
                                    var require = $package.installed.require;
                                    angular.forEach(require, function(value, key) {
                                        if (this.indexOf(key) == -1) {
                                            this.push(key);
                                        }
                                    }, requires);
                                }
                            };

                            pushRequires($scope.packages[name]);
                            $scope.packages[name] = response.data;
                            pushRequires($scope.packages[name]);

                            angular.forEach(requires, function(value, key) {
                                var name = value;
                                if (typeof($scope.packages[name]) != 'undefined') {
                                    updatePackage(name);
                                }
                            });

                        } else {

                            $scope.packages[name] = response.data;

                        }
                    }
                });
            };

            var updateStatus = function(method, name, version) {
                api.getStatus(method, name, version).success(function(response) {
                    var html = response.msg;
                    if (true == response.working) {
                        $timeout(function() {
                            updateStatus(method, name, version);
                        }, 200);
                        html += 'Loading ...';
                    } else if (response.success) {
                        updatePackage(name, true);
                    }

                    $scope.status.body = function(str) {
                        return (str + '').replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1<br />$2');
                    }(html);
                });
            };

            var callMethod = function(method, name, version) {
                var title = method.charAt(0).toUpperCase() + method.substr(1) + ': ' + name;
                if ('require' == method) {
                    title += ':' + version;
                }
                $scope.status.title = title;
                $scope.status.body  = 'Loading ...';

                api.callMethod(method, name, version).success(function(response) {
                    if (false == response.success) {
                        $scope.status.body = response.msg;
                    } else {
                        updateStatus(method, name, version);
                    }
                });
            };

            $scope.remove = function($package) {
                callMethod('remove', $package.name);
            };

            $scope.require = function($package, $version) {
                callMethod('require', $package.name, $version.version);
            };

            $scope.previousPage = function() {
                if ($scope.curPage == 1) {
                    return;
                }
                $scope.curPage = $scope.curPage - 1;

                loadPage($scope.curPage, $scope.nameFilter);
            };

            $scope.nextPage = function() {
                if ($scope.curPage >= $scope.totalPackages/$scope.pageSize - 1) {
                    return;
                }
                $scope.curPage = $scope.curPage + 1;

                loadPage($scope.curPage, $scope.nameFilter);
            };

            var tempFilterText = '';
            var filterTextTimeout;
            $scope.$watch('nameFilter', function(val) {
                if (filterTextTimeout) {
                    $timeout.cancel(filterTextTimeout);
                }
                tempFilterText = val;
                filterTextTimeout = $timeout(function() {
                    $scope.curPage = 1;
                    $scope.nameFilter = tempFilterText;
                    loadPage($scope.curPage, $scope.nameFilter);
                }, 500);
            });
        });

        // Services
        angular.module('moderaApp.services', [
            //
        ]).factory('api', function($http) {
            var api = {};

            api.getList = function($page, $nameFilter) {
                return $http({
                    method: 'GET',
                    url: '{{ pathPrefix }}' + '/api?action=list&page=' + ($page || 1) + '&filter=' + ($nameFilter || '')
                });
            };

            api.getInfo = function(name) {
                return $http({
                    method: 'GET',
                    url: '{{ pathPrefix }}' + '/api?action=info&name=' + name
                });
            };

            api.getStatus = function(method, name, version) {
                var url = '{{ pathPrefix }}' + '/status?method=' + method + '&name=' + name;
                if ('require' == method) {
                    url += '&version=' + version;
                }

                return $http({
                    method: 'GET',
                    url: url
                });
            };

            api.callMethod = function(method, name, version) {
                var url = '{{ pathPrefix }}' + '/call?method=' + method + '&name=' + name;
                if ('require' == method) {
                    url += '&version=' + version;
                }

                return $http({
                    method: 'GET',
                    url: url
                });
            };

            return api;
        });

        // Directives
        angular.module('moderaApp.directives', [
            //
        ]).directive('pager', function() {
            return {
                templateUrl: '/pager.html'
            };
        });

        // Filters
        angular.module('moderaApp.filters', [
            //
        ]).filter('unsafe', function($sce) {
            return function(val) {
                return $sce.trustAsHtml(val);
            };
        });
    </script>

    <script type="text/ng-template" id="/pager.html">
        <ul class="pager">
            <li class="previous" ng-class="(curPage == 1 ? 'disabled' : '')">
                <a href="#" ng-click="previousPage()">&laquo;</a>
            </li>
            <li>
                <span>Page {[{ curPage }]}</span>
            </li>
            <li class="next" ng-class="(curPage >= totalPackages/pageSize - 1 ? 'disabled' : '')">
                <a href="#" ng-click="nextPage()">&raquo;</a>
            </li>
        </ul>
    </script>

    <div class="modal fade" id="modal" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title" id="modalLabel">{[{ status.title }]}</h4>
                </div>
                <div class="modal-body" style="padding:20px;" ng-bind-html="status.body | unsafe"></div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <input type="text" id="nameFilter" ng-model="nameFilter" placeholder="Search..." class="form-control" />

    <nav pager></nav>

    <table style="width:100%; text-align:center;">
        <tbody>
            <tr ng-show="(loading || !totalPackages)">
                <td>
                    {[{ loading ? 'Loading...' : 'No packages' }]}
                </td>
            </tr>
            <tr ng-repeat="p in packages">
                <td>
                    <ul class="list-group row">
                        <li class="list-group-item" style="background-color:#f5f5f5;">
                            {[{ p.name }]}
                            <a ng-if="p.installed"
                               ng-click="!p.installed.isDependency ? remove(p) : ''"
                               data-toggle="modal"
                               data-target="#modal"
                               class="btn btn-xs {[{ p.installed.isDependency ? 'btn-warning disabled' : 'btn-danger' }]}"
                            >{[{ p.installed.isDependency ? 'Dependency' : 'Uninstall' }]}</a>
                        </li>
                        <li class="list-group-item">
                            <a ng-repeat="pv in p.versions"
                               ng-click="require(p, pv)"
                               data-toggle="modal"
                               data-target="#modal"
                               class="btn btn-xs {[{ (pv.reference == p.installed.reference && !p.installed.isDependency) ? 'btn-success disabled' : (p.installed.isDependency ? 'btn-warning' : 'btn-info') }]}"
                               style="width:15%; margin:1px;"
                            >{[{ pv.version }]}{[{ pv.branchAlias ? ' / ' + pv.branchAlias : '' }]}</a>
                        </li>
                    </ul>
                </td>
            </tr>
        </tbody>
    </table>

    <nav pager></nav>
{% endblock %}